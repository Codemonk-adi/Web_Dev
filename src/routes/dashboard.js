const express = require('express');
const { getAllDashboardsByUser, addManager, deleteManager,createDashboard, addViewer, deleteViewer, deleteDashboard, uploadFiles, deleteAllFiles, sendInviteEmail } = require('../controller/dashboard');
const {requireSignin, upload} = require('../common-middleware');
const router = express.Router();

router.get('/getAllDashboardsByUser/:userId', requireSignin, getAllDashboardsByUser);
router.post('/createDashboard', requireSignin, createDashboard);
router.post('/addManager', requireSignin, addManager);
router.post('/deleteManager', requireSignin, deleteManager);
router.post('/addViewer', requireSignin, addViewer);
router.post('/deleteViewer', requireSignin, deleteViewer);
router.post('/deleteDashboard', requireSignin, deleteDashboard);
router.post('/uploadFiles', upload.array("files"), requireSignin, uploadFiles);
router.post('/deleteAllFiles', requireSignin, deleteAllFiles);
router.post('/sendInviteEmail', requireSignin, sendInviteEmail);
module.exports = router;

/**
 * Dashboard routes (all require sign-in)-
 * 
 * /api/dashboard/getAllDashboardsByUser/:userId - GET - takes userId (generated by mongodb as parameter); returns all dashboards owned/managed/viewed by the user separately
 * 
 * /api/dashboard/createDashboard - POST - takes name, description (both string) in the body; creates and returns a new dashboard owner by the currently logged in user
 * 
 * /api/dashboard/deleteDashboard - POST - takes dashboardId (generated by mongodb) in the body; deletes the dashboard corresponding to the id if the current user is the owner; clears all files from the dashboard corresponding to the id if the current user is a manager
 * 
 * /api/dashboard/addManager - POST - takes managerId, dashboardId (generated by mongodb) in the body; add the user corresponding to the managerId as a manager in the dashboard corresponding to the dashboardId if the currently logged in user is the owner
 * 
 * /api/dashboard/deleteManager - POST - takes managerId, dashboardId (generated by mongodb) in the body; removes the user corresponding to the managerId as a manager in the dashboard corresponding to the dashboardId if the currently logged in user is the owner
 * 
 *  /api/dashboard/addViewer - POST - takes viewerId, dashboardId (generated by mongodb) in the body; add the user corresponding to the viewerId as a viewer in the dashboard corresponding to the dashboardId if the currently logged in user is the owner or a manager
 * 
 * /api/dashboard/deleteViewer - POST - takes viewerId, dashboardId (generated by mongodb) in the body; removes the user corresponding to the viewerId as a viewer in the dashboard corresponding to the dashboardId if the currently logged in user is the owner or a manager
 * 
 * /api/dashboard/uploadFiles - POST - takes files along with dashboardId as formData; uploads the files in the dashboard corresponding to the dashboardId if the currently logged in user is the owner or a manager
 * 
 * /api/dashboard/sendInviteEmail - POST - takes email, dashboardId, role in the body; send invite emails to the email; if a user with that email does not exist then it creates a new unverified profile with a randomized password and adds it to the dashboard
 */